AWSTemplateFormatVersion: 2010-09-09
Description: Automating backup copy AWS Backup

Parameters:
  AWSOrganizationID:
    Type: String
    Description: AWS Organizations ID
  BackupVaultName:
    Type: String
    Description: The name of a Backup vaults
  DeleteAfterDays:
    Type: Number
    Description: DeleteAfterDays for the copies
    Default: 1000
  MoveToColdStorageAfterDays:
    Type: Number
    Description: MoveToColdStorageAfterDays for the copies
    Default: 999
  HelperFunctionState:
    Type: String
    Description: The state of the helper function
    AllowedValues:
      - ENABLED
      - DISABLED
    Default: DISABLED
  RetentionsDays:
    Type: Number
    Description: The number of days to retain backups for
    Default: 7

Resources:
# IAM Role for AWS Backup

  AWSBackupIAMRole:
    Type: AWS::IAM::Role
    Properties:
      Description: Allows AWS Backup to call AWS services on your behalf
      AssumeRolePolicyDocument: |
          {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "Service": "backup.amazonaws.com"
                },
                "Action": "sts:AssumeRole"
              }
            ]
          }
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSBackupServiceRolePolicyForBackup


  BackupVault:
    Type: AWS::Backup::BackupVault
    Properties:
      AccessPolicy: !Sub |
          {
              "Version": "2012-10-17",
              "Statement": [
                  {
                      "Sid": "Enable backup vault access",
                      "Effect": "Allow",
                      "Principal": "*",
                      "Action": "backup:CopyIntoBackupVault",
                      "Resource": "arn:aws:backup:${AWS::Region}:${AWS::AccountId}:backup-vault:${BackupVaultName}",
                      "Condition": {
                          "StringEquals": {
                              "aws:PrincipalOrgID": "${AWSOrganizationID}"
                          }
                      }
                  }
              ]
          }
      BackupVaultName: !Ref BackupVaultName
      EncryptionKeyArn: !GetAtt KMSCustomerManagedKey.Arn

  KMSCustomerManagedKey:
    Type: AWS::KMS::Key
    Properties:
      EnableKeyRotation: true
      Description: KMS key for AWS Backup Vault
      KeyPolicy: !Sub |
          {
              "Version": "2012-10-17",
              "Id": "backup-vault-policy-${BackupVaultName}",
              "Statement": [
                  {
                      "Sid": "Enable IAM User Permissions",
                      "Effect": "Allow",
                      "Principal": {
                          "AWS": "arn:aws:iam::${AWS::AccountId}:root"
                      },
                      "Action": [
                        "kms:PutKeyPolicy",
                        "kms:ScheduleKeyDeletion",
                        "kms:EnableKeyRotation",
                        "kms:DescribeKey",
                        "kms:CreateAlias",
                        "kms:DeleteAlias",
                        "kms:CreateGrant"
                      ],
                      "Resource": "*"
                  },
                  {
                      "Sid": "Allow access from AWS Organizations accounts to copy backups",
                      "Effect": "Allow",
                      "Principal": {
                          "AWS": "*"
                      },
                      "Action": [
                          "kms:CreateGrant",
                          "kms:Decrypt",
                          "kms:GenerateDataKey*",
                          "kms:DescribeKey"
                      ],
                      "Resource": "*",
                      "Condition": {
                          "StringEquals": {
                              "aws:PrincipalOrgID": "${AWSOrganizationID}"
                          }
                      }
                  }
              ]
          }

  KMSCustomerManagedKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub "alias/${BackupVaultName}-key"
      TargetKeyId: !Ref KMSCustomerManagedKey


  IAMPolicyRDSServiceLinkedRole:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: IAMPolicyRDSServiceLinkedRole-eu-west-1
      Roles:
        - !Ref AWSBackupIAMRole
      PolicyDocument: !Sub |
          {
              "Version": "2012-10-17",
              "Statement": [
                  {
                      "Effect": "Allow",
                      "Action": "iam:CreateServiceLinkedRole",
                      "Resource": "arn:aws:iam::${AWS::AccountId}:role/aws-service-role/rds.amazonaws.com/AWSServiceRoleForRDS"
                  }
              ]
          }

  EventsRule:
    Type: "AWS::Events::Rule"
    Properties:
      Name: "AWSBackupCopyCompleteRule2"
      Description: "EventBridge Rule for CopyCompleteJob event to trigger cross-region backup copy"
      EventPattern: !Sub |
          {
            "source": ["aws.backup"],
            "account": [{
              "anything-but": "${AWS::AccountId}"
            }],
            "detail-type": ["Copy Job State Change"],
            "detail": {
              "state": ["COMPLETED"]
            }
          }
      State: "ENABLED"
      Targets:
      -
        Arn: !GetAtt LambdaFunction.Arn
        Id: "TargetFunctionV1"
      EventBusName: "default"

  EventsEventBusPolicy:
    Type: "AWS::Events::EventBusPolicy"
    Properties:
      StatementId: "AWSBackupCopyCompleteEvent"
      Action: "events:PutEvents"
      Condition:
        Key: "aws:PrincipalOrgID"
        Type: "StringEquals"
        Value: !Ref AWSOrganizationID
      Principal: "*"

  LambdaIAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: CloudwatchBackupPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - kms:CreateGrant
                  - kms:DescribeKey
                  - kms:RetireGrant
                  - kms:Decrypt
                  - kms:GenerateDataKey
                Resource: '*'
              - Effect: Allow
                Action:
                  - backup:StartCopyJob
                  - backup:DescribeRecoveryPoint
                  - backup:StartBackupJob
                  - backup:ListBackupJobs
                  - backup:CreateBackupVault
                  - backup:DescribeBackupVault
                  - backup:UpdateBackupVault
                  - backup:DeleteBackupVault
                  - backup:ListBackupVaults
                  - backup-storage:MountCapsule
                Resource: '*'
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - arn:aws:logs:*:*:*
        - PolicyName: OrganizationPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - organizations:ListAccounts
                  - organizations:ListAccountsForParent"
                  - organizations:ListAWSServiceAccessForOrganization
                  - organizations:ListChildren
                  - organizations:ListCreateAccountStatus
                  - organizations:ListParents
                  - organizations:ListRoots
                  - organizations:ListTagsForResource
                  - organizations:DescribeAccount
                  - organizations:DescribeCreateAccountStatus
                  - organizations:DescribeOrganization
                  - organizations:DescribeOrganizationalUnit
                Resource: '*'
        - PolicyName: LambdaPolicyAssumeRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource: !GetAtt AWSBackupIAMRole.Arn
      Description: "Allows Lambda functions to call CW Logs and Backup services"

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Lambda Function that triggers an AWS Backup Vault Copy to a different Vault
      Environment:
        Variables:
          role_name: !GetAtt AWSBackupIAMRole.Arn
          DeleteAfterDays: !Ref DeleteAfterDays
          MoveToColdStorageAfterDays: !Ref MoveToColdStorageAfterDays
          backup_vault_name: !Ref BackupVaultName
      FunctionName: "AWSBackupNewVaultCopy"
      Handler: index.lambda_handler
      Code:
        ZipFile: |
          import json
          import boto3
          import os
          import logging

          def configure_logging():
              logger = logging.getLogger()
              logger.setLevel(logging.INFO)
              logging.getLogger("boto3").setLevel(logging.WARNING)
              logging.getLogger("botocore").setLevel(logging.WARNING)
              return logger

          def get_account_name(account_id, org_client, logger):
              try:
                  response = org_client.describe_account(AccountId=account_id)
                  return response['Account']['Name']
              except Exception as e:
                  logger.error(f"Error getting account name for {account_id}: {str(e)}")
                  return None

          def create_backup_vault(backup_connection, account_npid, logger):
              try:
                  response = backup_connection.create_backup_vault(BackupVaultName=account_npid)
                  logger.info(f'Created Backup Vault: {account_npid}')
              except Exception as e:
                  logger.error(f"Error creating backup vault {account_npid}: {str(e)}")

          def initiate_backup_job(backup_client, event, backup_vault_name, role_name, logger):


              # Logic for retrieving existing recovery points, creation dates, etc. (if applicable)
              old_backup_vault_name = event['detail']['destinationBackupVaultArn'].split(':')[6]
              response = backup_client.list_recovery_points_by_backup_vault(
                            BackupVaultName=backup_vault_name
                        )
              recovery_point = backup_client.describe_recovery_point(
                        BackupVaultName=old_backup_vault_name,
                        RecoveryPointArn=event['detail']['destinationRecoveryPointArn']
                    )
              lifecycle_value = 'CalculatedLifecycle'
              # Determine lifecycle configuration (adjust as needed)
              lifecycle = {
                  'MoveToColdStorageAfterDays': os.environ.get('MoveToColdStorageAfterDays'),
                  'DeleteAfterDays': os.environ.get('DeleteAfterDays')
              }
              old_backup_vault_arn = event['detail']['destinationBackupVaultArn']
              backup_vault_arn = old_backup_vault_arn.replace(old_backup_vault_name, backup_vault_name)
              try:
                  if lifecycle_value in recovery_point:
                      response = backup_client.start_copy_job(
                        RecoveryPointArn=event['detail']['destinationRecoveryPointArn'],
                        SourceBackupVaultName=old_backup_vault_name,
                        DestinationBackupVaultArn=backup_vault_arn,
                        IamRoleArn=role_name,
                        Lifecycle={
                        'DeleteAfterDays': int(recovery_point['Lifecycle']['DeleteAfterDays'])
                        }
                    )
                  else:
                      response = backup_client.start_copy_job(
                        RecoveryPointArn=event['detail']['destinationRecoveryPointArn'],
                        SourceBackupVaultName=old_backup_vault_name,
                        DestinationBackupVaultArn=backup_vault_arn,
                        IamRoleArn=role_name,
                        Lifecycle=lifecycle
                )
                  logger.info(f'AWS Backup Copy Job initiated. Job ID: {response["CopyJobId"]}')
                  return json.dumps(response, default=str)

              except Exception as e:
                  logger.error(f"Error initiating copy job: {str(e)}")
                  logger.error(f"Incoming event: {json.dumps(event)}")  # Print the event



          def lambda_handler(event, context):
              logger = configure_logging()

              # Function variables
              role_name = os.environ.get('role_name')

              # Boto3 clients
              org_client = boto3.client('organizations')
              backup_client = boto3.client('backup')

              # Extract account ID from the event
              account_id = event['account']
              logger.info(f"Processing event for Account ID: {account_id}")

              account_name = get_account_name(account_id, org_client, logger)

              if account_name:
                  logger.info(f'Account name: {account_name}')
                  backup_vault_name = f'{account_name}-{account_id}'  # New naming convention
                  logger.info(f"Backup vault name: {backup_vault_name}")

                  try:
                      backup_client.describe_backup_vault(BackupVaultName=backup_vault_name)
                      logger.info(f'Backup vault exists: {backup_vault_name}')
                  except backup_client.exceptions.BackupVaultNotFoundException:
                      logger.info('Creating backup vault')
                      create_backup_vault(backup_client, backup_vault_name, logger)

                  # Initiate backup job
                  initiate_backup_job(backup_client, event, backup_vault_name, role_name, logger)

              else:
                  logger.error(f"Unable to retrieve account name for Account ID: {account_id}. Skipping processing.")
      MemorySize: 128
      Role: !GetAtt LambdaIAMRole.Arn
      Runtime: python3.11
      Timeout: 20


  LambdaPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt LambdaFunction.Arn
      Principal: events.amazonaws.com
      SourceArn: !GetAtt EventsRule.Arn


  LambdaUnsuccessfulRunAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: LambdaUnsuccessfulRunAlarm
      AlarmDescription: Alarm for unsuccessful Lambda runs
      Namespace: AWS/Lambda
      MetricName: Errors
      Dimensions:
        - Name: FunctionName
          Value: !Ref LambdaFunction
      Statistic: Sum
      Period: 300  # You can adjust the period as needed
      EvaluationPeriods: 1
      Threshold: 1  # Adjust the threshold based on your criteria
      ComparisonOperator: GreaterThanOrEqualToThreshold
      AlarmActions:
        - !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:aws-controltower-SecurityNotifications
      TreatMissingData: notBreaching

  LambdaErrorInLogAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: LambdaErrorInLogAlarm
      AlarmDescription: Alarm for errors in Lambda logs
      Namespace: AWS/Lambda
      MetricName: Errors
      Dimensions:
        - Name: FunctionName
          Value: !Ref LambdaFunction
      Statistic: Sum
      Period: 300  # You can adjust the period as needed
      EvaluationPeriods: 1
      Threshold: 1  # Adjust the threshold based on your criteria
      ComparisonOperator: GreaterThanOrEqualToThreshold
      AlarmActions:
        - !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:aws-controltower-SecurityNotifications
      TreatMissingData: notBreaching

  BackupFailedCopyJobsAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: BackupFailedCopyJobsAlarm
      AlarmDescription: Alarm for failed AWS Backup copy jobs
      Namespace: AWS/Backup
      MetricName: NumberOfCopyJobsFailed
      Statistic: Sum
      Period: 300  # You can adjust the period as needed
      EvaluationPeriods: 1
      Threshold: 1  # Adjust the threshold based on your criteria
      ComparisonOperator: GreaterThanOrEqualToThreshold
      AlarmActions:
        - !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:aws-controltower-SecurityNotifications
      TreatMissingData: notBreaching

  BackupHelperFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt BackupHelperFunctionExecutionRole.Arn
      FunctionName: BackupHelperFunction
      Runtime: python3.11
      Timeout: 60
      Code:
        ZipFile: |
          import boto3
          from datetime import datetime, timedelta, timezone
          import os


          def lambda_handler(event, context):
              # Creating a Backup client
              backup_client = boto3.client('backup')

              # Extracting necessary information from the event
              backup_vault_name = os.environ.get('BackupVaultName')
              retention_days_threshold = 0

              # Getting the current timestamp in UTC
              current_timestamp = datetime.utcnow().replace(tzinfo=timezone.utc)

              # Listing all recovery points in the specified backup vault
              try:
                  response = backup_client.list_recovery_points_by_backup_vault(
                      BackupVaultName=backup_vault_name
                  )
                  recovery_points = response['RecoveryPoints']

                  # Deleting recovery points older than the specified threshold
                  for recovery_point in recovery_points:
                      creation_timestamp = recovery_point['CreationDate'].replace(tzinfo=timezone.utc)
                      age_in_days = (current_timestamp - creation_timestamp).days

                      if age_in_days > retention_days_threshold:
                          delete_recovery_point(backup_client, backup_vault_name, recovery_point['RecoveryPointArn'])

                  print(f"Deleted recovery points older than {retention_days_threshold} days in {backup_vault_name}")
              except Exception as e:
                  print(f"Error listing or deleting recovery points: {str(e)}")

          def delete_recovery_point(backup_client, backup_vault_name, recovery_point_arn):
              try:
                  response = backup_client.delete_recovery_point(
                      BackupVaultName=backup_vault_name,
                      RecoveryPointArn=recovery_point_arn
                  )
                  print(f"Deleted recovery point: {recovery_point_arn}")
                  print(response)
              except Exception as e:
                  print(f"Error deleting recovery point {recovery_point_arn}: {str(e)}")
      Environment:
        Variables:
          BackupVaultName: !Ref BackupVaultName
          RetentionsDays: !Ref RetentionsDays

  BackupHelperFunctionExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: MyLambdaExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - backup:ListRecoveryPointsByBackupVault
                  - backup:DeleteRecoveryPoint
                Resource: '*'

  BackupHelperFunctionEventRule:
    Type: 'AWS::Events::Rule'
    Properties:
      Description: 'Trigger Lambda function every hour'
      Name: 'HourlyTriggerRule'
      ScheduleExpression: 'cron(0 * * * ? *)'  # Trigger every hour
      State: !Ref HelperFunctionState
      Targets:
        - Arn: !GetAtt BackupHelperFunction.Arn
          Id: 'TargetFunction'
