AWSTemplateFormatVersion: '2010-09-09'
Description: Lambda function to scan EC2 instances with GuardDuty

Parameters:
  EmailAddress:
    Type: String
    Description: Email address to receive error notifications

Resources:
  # IAM Policy
  LambdaGuardDutyPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: LambdaGuardDutyPolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              - ec2:DescribeInstances
              - guardduty:ListDetectors
              - guardduty:StartMalwareScan
              - iam:GetRole
            Resource: '*'
      Roles:
        - !Ref LambdaRole  # Attach the policy to the Lambda Role
  # IAM Policy for CloudWatch Events Invocation.
  LambdaInvocationPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: AllowLambdaInvocationFromEvents
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: 'lambda:InvokeFunction'
            Resource: !GetAtt MalwareScanLambda.Arn
      Roles:
        - !Ref LambdaRole

  # Lambda IAM Role (Modified)
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole

  # Lambda Function
  MalwareScanLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: MalwareScanFunction
      Runtime: python3.11
      Code:
        ZipFile: |
          import boto3
          import json

          def lambda_handler(event, context):
              ec2 = boto3.client('ec2')
              guardduty = boto3.client('guardduty')

              def get_all_instances():
                  """Generator to yield all instances in the region with pagination"""
                  paginator = ec2.get_paginator('describe_instances')
                  page_iterator = paginator.paginate()

                  for page in page_iterator:
                      if 'Reservations' in page:
                          for reservation in page['Reservations']:
                              for instance in reservation['Instances']:
                                  yield instance

              def scan_instance(instance):
                try:
                    instance_id = instance['InstanceId']
                    region = instance['Placement']['AvailabilityZone'][:-1]  # Extract region
                    account_id = context.invoked_function_arn.split(":")[4]  # Get account ID

                    ec2_arn = f'arn:aws:ec2:{region}:{account_id}:instance/{instance_id}'
                    guardduty.start_malware_scan(ResourceArn=ec2_arn)
                    print(f"Malware scan initiated for instance: {instance_id}")
                except Exception as e:
                    print(f"Error starting scan for instance {instance_id}: {e}")

              # Get all instances
              instances = get_all_instances()

              # Initiate malware scans
              for instance in instances:
                  scan_instance(instance)

              return {
                  'statusCode': 200,
                  'body': json.dumps('Malware scans initiated')
              }
      Handler: index.lambda_handler
      Role: !GetAtt LambdaRole.Arn
      Timeout: 300  # Adjust timeout if necessary

  # Scheduled Trigger (Daily)
  LambdaSchedule:
    Type: AWS::Events::Rule
    Properties:
      Description: Trigger Lambda for daily malware scans
      ScheduleExpression: cron(55 * * * ? *)  # Run at 12:00 UTC daily
      State: ENABLED
      Targets:
        - Arn: !GetAtt MalwareScanLambda.Arn
          Id: MalwareScanTrigger

  EventRuleLambdaPermissions:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt MalwareScanLambda.Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt LambdaSchedule.Arn
  # Error Alarm
  MalwareScanLambdaErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Alarm if Lambda function errors occur
      Namespace: AWS/Lambda
      MetricName: Errors
      Dimensions:
        - Name: FunctionName
          Value: !Ref MalwareScanLambda
      Statistic: Sum
      Period: 300  # 5 minute evaluation period
      EvaluationPeriods: 1
      Threshold: 1  # Alarm if there's at least one error
      ComparisonOperator: GreaterThanOrEqualToThreshold
      AlarmActions:
        - !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:aws-controltower-SecurityNotifications



Outputs:
  LambdaFunctionArn:
    Description: ARN of the Lambda function
    Value: !GetAtt MalwareScanLambda.Arn
